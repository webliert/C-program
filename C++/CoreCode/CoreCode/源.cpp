#include<iostream>
#include<string>

using namespace std;

//测试堆区，栈区的使用
//全局变量，局部变量的区别
//
/****知识点总结：******
- 全局区：存放全局变量和静态变量以及常量
- 栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等
主要类别：
局部变量OR全局变量
在这两个大类下区分是不是静态变量与常量。
局部变量分配在栈区，由编译器自动分配释放。
当代码运行到主函数时，会自动分配一个栈帧，当主函数调用一个函数时，会再分配一个栈帧
对于一个栈帧的排布为
0|		   | |全局常量--全局变量---局部与全局静态变量| |局部常量---局部变量|100
*[  代码区 ] [				全局变量区	  			 ] [     局部变量区   ]
------------------------------------------------------------------------------
*/
int l_a = 10;
const int l_b = 10;
static int l_c = 23;
int main() {
	int a = 10;
	int a1 = 10;
	const int b = 20;
	const int b1 = 20;
	static int c = 23;
	cout << "局部变量1的地址为"<<(int)&a << endl;
	cout << "局部变量2的地址为" << (int)&a1 << endl;
	cout << "局部常量1的地址为" << (int)&b << endl;

	cout << "局部常量2的地址为" << (int)&b1 << endl;
	cout << "局部静态变量1的地址为" << (int)&c << endl;
	cout << "全局静态变量1的地址为" << (int)&l_c << endl;
	cout << "全局变量1的地址为" << (int)&l_a << endl;
	cout << "全局常量1的地址为" << (int)&l_b << endl;

	return 0;
}
/*
静态变量和常量的主要区别
值的可修改性
静态变量：静态变量的值在程序运行过程中是可以被修改的
常量：常量的值一旦初始化就不能被修改。如果尝试修改常量的值，编译器会报错。比如，若在代码中写myConst = 50;，编译器会提示错误。
内存分配和生命周期
静态变量：
全局静态变量和类的静态成员变量在程序启动时就分配内存，直到程序结束才释放内存。
局部静态变量在第一次执行到其定义语句时分配内存，之后即使函数执行结束，该变量的内存也不会释放，直到程序结束。
常量：对于基本数据类型的常量，编译器可能会将其值直接嵌入到代码中，不单独占用运行时的内存空间；对于复杂类型的常量，会在静态存储区分配内存，其生命周期也是整个程序的运行过程，但值不可变。
作用域
静态变量：
全局静态变量的作用域仅限于定义它的文件，其他文件无法访问。
局部静态变量的作用域仅限于定义它的函数内部，但生命周期是整个程序运行期间。
类的静态成员变量的作用域是整个类，所有类的对象共享该变量。
常量：常量的作用域取决于其定义的位置。如果在函数内部定义，作用域就是该函数内部；如果在类中定义，作用域就是该类。
使用场景
静态变量：
全局静态变量可用于在一个文件内共享数据，避免命名冲突。
局部静态变量可用于记录函数的调用次数或保存函数的中间状态。
类的静态成员变量可用于存储类级别的共享数据，如类的实例数量。
常量：常用于表示一些固定不变的值，如数学常数（圆周率、自然常数等）、配置信息（如数组的大小、文件路径等），提高代码的可读性和可维护性。
综上所述，C++ 中的静态变量和常量在值的可修改性、内存分配、作用域和使用场景等方面都存在明显的差异，在编程时需要根据具体需求来选择使用。
*/


/*
指针常量和常量指针之间的区别：
“左定值，右定向”：
如果 const 在 * 的左边，如 const int* p 或者 int const* p，表示指针指向的值是常量，也就是 “左定值”，此时不能通过指针修改其所指向的值，但指针可以指向其他地方。
如果 const 在 * 的右边，如 int* const p，表示指针本身是常量，也就是 “右定向”，指针一旦指向某个对象，就不能再指向其他对象，但可以修改该对象的值。
int * P之间的空格并不影响语法，不管是写成  int* p还是写成int *p。编译器都会把他当作同一种东西。
所以同理 int const* p和const int* p其实是等价的。此时，const 在*号的左边，左定值，表示这个指针指向的值不能变，但是指针的指向可以改变
而当使用int *const p或者int* const p时，右定向，代表指针指向不可改变，但是值可变。
*/